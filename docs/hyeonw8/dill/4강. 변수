# 4강 변수

##  4.1 변수란 무엇인가?
- 메모리는 데이터를 저장할 수 있는 메모리 셀의 집합체 <br/>
 => 메모리 셀 하나의 크기는 1바이트(8비트)이며, 컴퓨터는 메모리 셀의 크기, 즉 1바이트 단위로 데이터를 저장하거나 읽어들임

- 각 셀은 고유의 메모리 주소를 가지며, 이 메모리 주소는 메모리 공간의 위치를 나타냄
  -> 0부터 시작해서 메모리의 크기만큼 정수로 표현됨
  -> 메모리에 저장되는 데이터는 데이터의 종류와 상관없이 모두 2진수로 저장

---
<br>
연산 결과를 재사용하고 싶다면, 메모리 주소를 통해 연산 결과가 저장된 메모리 공간에 직접 접근하는 것 외에는 방법이 없다. 하지만 메모리 주소를 통해 값에 직접 접근하는 것은 오류를 발생시킬 가능성이 높기 때문에 자바스크립트는 개발자의 직접적인 메모리 제어를 허용하지 않는다.
<br />
<br>
동일한 컴퓨터에서 동일한 코드를 실행해도 코드가 실행될 때마다 값이 저장될 메모리 주소는 변경된다. 이처럼 코드가 실행되기 이전에는 값이 저장된 메모리 주소를 알 수 없으며, 알려 주지도 않는다. <br>
=> 따라서, 메모리 주소를 통해 값에 직접 접근하려는 시도는 올바른 방법이 아니며 <span style="color: lightblue"> 기억하고 싶은 값을 메모리에 저장하고, 저장된 값을 읽어 들여 재사용하기 위해 </span>변수라는 메커니즘을 제공하는 것이다.
<br />
<br>
<hr />
<hr />
<br>
변수는 하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름을 말한다. <br>
간단히 말하자면, 변수는 프로그래밍 언어에서 값을 저장하고 참조하는 메커니즘으로, 값의 위치를 가리키는 상징적인 이름이며 실행 시 메모리 공간의 주소로 치환되어서 실행된다. 
<br><br>
- 변수 이름 : 저장된 값을 식별할 수 있는 고유한 이름 <br />
- 변수 값 : 변수에 저장된 값 <br />
<br>
=> <span style="background-color: lightblue; color: black;">변수 이름을 사용해 참조를 요청하면(변수에 저장된 값을 읽어 들이면) 자바스크립트 엔진은 변수 이름과 매핑된 메모리 주소를 통해 메모리 공간에 접근해서 저장된 값을 반환한다. </span>
<br>
<hr>
<br>
할당 : 변수에 값을 저장하는 것, (= 대입, 저장) <br />
<span style="background-color: lightyellow; color: black;">참조 : 변수에 저장된 값을 읽어 들이는 것</span> <br />

<br>
<br>
<hr />
<hr />
<hr />
<br>

##  4.2 식별자 (= 변수 이름, 변수명 / 메모리 주소에 붙인 이름)
식별자는 어떤 값을 구별해서 식별할 수 있는 고유한 이름으로 값이 아니라 메모리 주소를 기억한다!!!

- 어떤 값이 저장되어 있는 메모리 주소를 기억(저장)해야 함 <br/>
 => 값이 저장되어 있는 메모리 주소와 매핑 관계를 맺으며, 이 매핑 정보도 메모리에 저장되어야 함
- <span style="background-color: lightblue; color: black;">즉, 식별자는 메모리 주소에 붙인 이름이라고 할 수 있음 </span>
- 변수, 함수, 클래스 등의 이름은 모두 식별자로 메모리 상에 존재하는 어떤 값을 식별할 수 있는 이름은 모두 식별자라고 부름
<br>
<br>

식별자는 네이밍 규칙을 준수해야 하며, 선언에 의해 자바스크립트 엔진에 식별자의 존재를 알린다.

<br>
<hr />
<hr />
<hr />
<br>

##  4.3 변수 선언
변수 선언이란 변수를 생성하는 것을 말한다.
<br>=> 자세히 말하면, 값을 저장하기 위한 메모리 공간을 확보하고 변수 이름과 메모리 공간의 주소를 연결해서 값을 저장할 수 있게 준비하는 것

변수를 사용하려면 반드시 선언이 필요하며, 선언할 때는 <span style="color: lightblue">var, let, const 키워드</span>를 사용한다.

---

** var 키워드<br> 
var 키워드는 여러 단점이 존재하는데, 대표적으로 함수 레벨 스코프를 지원한다는 것임. 이로 인해 의도치 않게 전역 변수가 선언되어 심각한 부작용이 발생하기도 함.
<br> 따라서 가능하면 const,let을 주로 사용하고 var는 사용하지 않는 것이 좋음
<br> 또한, var 키워드를 사용한 변수 선언은 선언 단계와 초기화 단계가 동시에 진행됨(이로 인해 이후에 값을 지정하여 초기화하게 되면 재할당이 되어버리는 것임!)

---

<h4>[ 변수 선언 단계 ]</h4>
1) <span style="color: lightblue">선언 단계 </span>: 변수 이름을 등록해서 자바스크립트 엔진에 변수의 존재를 알림 <br>
2) <span style="color: lightblue">초기화 단계 </span>: 값을 저장하기 위한 메모리 공간을 확보하고 암묵적으로 undefined를 할당해 초기화함 
<br> -> <span style="color: lightgray">초기화란? 변수가 선언된 이후 최초로 값을 할당하는 것</span>
<br> <br> 

---
** 실행 컨텍스트
<br>모든 식별자는 실행 컨텍스트에 등록됨. 실행 컨텍스트는 자바스크립트 엔진이 소스코드를 평가하고 실행하기 위해 필요한 환경을 제공하고 코드의 실행 결과를 실제로 관리하는 영역임.
<br> 자바스크립트 엔진은 실행 컨텍스트를 통해 식별자와 스코프를 관리하며, 변수 이름과 변수 값은 키/값 형식인 객체로 등록되어 관리됨.


<br>
💭 ReferenceError(참조 에러) <br>
만약 선언하지 않은 식별자에 접근하면 ReferenceError(참조 에러)가 발생한다. 참조에러는 식별자를 통해 값을 참조하려 했지만 자바스크립트 엔진이 등록된 식별자를 찾을 수 없을 때 발생하는 에러다.

<br>
<br>
<br>
<hr />
<hr />
<hr />
<br>

##  4.4 변수 선언의 실행 시점과 변수 호이스팅
변수 선언은 소스코드가 한 줄씩 순차적으로 실행되는 시점, 즉 런타임이 아니라 그 이전 단계에 먼저 실행되기 때문이다.

1) 자바스크립트 엔진은 코드 실행 전 소스코드의 평가 과정을 거침
2) 모든 선언문을 소스코드에서 찾아내 먼저 실행
3) 소스코드 평가 과정이 끝나면, 변수 선언을 포함한 모든 선언문을 제외하고 한줄씩 순차적으로 실행

즉, 자바스크립트 엔진은 변수 선언이 소스코드의 어디에 있든 상관없이 다른 코드보다 먼저 실행한다. 따라서 변수 선언이 소스코드의 위치하는지와 상관없이 
어디서든지 변수를 참조할 수 있다.

---

<h3>호이스팅</h3>
변수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트의 고유 특징을 말한다.

```
  console.log(score);

  var score;
```

위의 예제를 실행하면 실행되는 시점에는 아직 변수가 선언되기 이전이므로 참조 에러가 발생해야할 것 같지만, 실제로는 undefined가 출력된다.
이는 변수 선언(선언 + 초기화)이 소스코드가 순차적으로 실행되는 런타임 이전 단계에서 먼저 실행된다는 증거이다!

사실 변수 뿐아니라 var, let, const, function, function*, class 키워드를 사용해서 선언하는 모든 식별자(변수, 함수, 클래스)는 호이스팅된다. 
<span style="color: lightblue">모든 선언문은 런타임 이전 단계에서 먼저 실행되기 때문이다!</span>

<br>
<hr />
<hr />
<hr />
<br>

##  4.5 값의 할당 (= 대입, 저장)
변수에 값을 할당할 때는 할당 연산자 =를 사용한다. 할당 연산자는 우변의 값을 좌변의 변수에 할당한다.
```
  var score; // 변수 선언
  score = 90; // 값의 할당
```
변수 선언과 값의 할당을 하나의 문으로 단축 표현할 수도 있다
```
  var score = 90;
```

단축 표현을 사용하여도 동작하는 단계는 변수 선언, 값의 할당 2개의 문으로 나누어 각각 실행한다. 따라서 변수에 undefined가 할당되어 초기화되는 것은 변함이 없다.
<br> 이때 주의할 점은 변수 선언과 값의 할당의 실행 시점이 다르다는 것이다! 
<br> <span style="background-color: lightblue; color: black;">변수 선언은 소스코드가 순차적으로 실행되는 시점인 런타임 이전에 먼저 실행되지만 값의 할당은 소스코드가 순차적으로 실행되는 시점인 런타임에 실행된다!</span>
  - 변수 선언 : 런타임 이전
  - 값의 할당 : 런타임에 실행

```
  console.log(score); // undefined

  var score; // 변수 선언
  score = 90; // 값의 할당

    console.log(score); // 80
```

==> 변수 선언은 런타임 이전에 먼저 실행되고 값의 할당은 런타임에 실행된다. 따라서 score 변수에 값을 할당하는 시점에는 이미 변수 선언이 완료된 상태이며, undefined로 초기화되어 있다. 
<br> 따라서, score 변수에 값을 할당하면 score 변수의 값은 undefined에서 새롭게 할당한 숫자 값 80으로 변경(재할당)된다.


> 또한, 변수에 값을 할당할 때는 이전 값 undefined가 저장되어 있던 메모리 공간을 지우고 그 메모리 공간에 할당 값 80을 새롭게 저장하는 것이 아니라 <span style="color: lightblue"> 새로운 메모리 공간을 확보하고 그곳에 할당 값 80을 저장한다는 점에 주의하자</span>!!!

<span style="color: lightgray"> => 재할당으로 인해 더 이상 사용되지 않는 불필요한 값들은 가비지 콜렉터에 의해 메모리에서 자동으로 해제됨(단, 언제 해제될지는 예측 불가)
<br>
</span>

// 그림 추가하기 (44px)

<br>
<span style="color: lightgray">
** 가비지 콜렉터
<br> 애플리케이션이 할당한 메모리 공간을 주기적으로 검사하여 더 이상 사용되지 않는 메모리를 해제하는 기능을 말함.
더 이상 사용되지 않는 메모리란 어떤 식별자도 참조하지 않는 메모리 공간을 의미하며, js는 가비지 콜렉터를 내장하고 있는 매니지드 언어로서 가비지 콜렉터를 통해 메모리 누수를 방지함
</span>

<br>
<br>
<br>
<hr />
<hr />
<hr />
<br>

##  4.6 값의 재할당
재할당이란 이미 값이 할당되어 있는 변수에 새로운 값을 또다시 할당하는 것을 말한다.
```
  var score = 90; // 변수 선언과 값의 할당
  score = 100; // 값의 재!할당
```

** var 키워드로 선언한 변수는 값을 재할당할 수 있는데, 사실 var키워드로 선언한 변수는 선언과 동시에 undefined로 초기화되기 때문에 엄밀히 말하자면 변수에 처음으로 값을 할당하는 것도 사실은 재할당이다🔥


재할당은 변수에 저장된 값을 다른 값으로 변경한다. 그래서 변수라고 하는 것인데, 만약 값을 재할당할 수 없어서 변수에 저장된 값을 변경할 수 없다면 변수가 아니라 "상수"라고 한다. 
<span style="color: lightblue"> 상수는 한번 정해지면 변하지 않는 값으로 단 한번만 할당할 수 있는 변수이다!</span>

<br>
<hr />
<hr />
<hr />
<br>

##  4.7 식별자 네이밍 규칙
식별자(변수명, 변수이름)는 어떤 값을 구별해서 식별해낼 수 있는 고유한 이름을 말하며, 식별자는 다음과 같은 네이밍 규칙을 준수해야 한다.
- 식별자는 특수문자를 제외한 문자, 숫자, 언더스코어(_), 달러 기호를 포함할 수 있음
- 단, 식별자는 특수문자를 제외한 문자, 언더스코어(_), 달러 기호로 시작해야 하며, 숫자로 시작하는 것은 허용하지 않음
- 예약어는 식별자로 사용할 수 없음
- 주의) 자바스크립트는 대소문자를 구별하므로 주의해서 사용할 것!

변수 이름은 변수의 존재 목적을 쉽게 이해할 수 있도록 의미를 명확히 표현해야 하며, 좋은 변수 이름은 코드의 가독성을 높인다. (별도 주석으로 설명이 필요하다면 좋은 변수 이름이라고 하긴 어려울 듯...)

---
<b>네이밍 컨벤션</b>은 하나 이상의 영어 단어로 구성된 식별자를 만들 때 가독성 좋게 단어를 한눈에 구분하기 위해 규정한 명명 규칙으로 네이밍 컨벤션을 잘 지키면 읽기 좋은 이름을 만들 수 있다.
```
  // 카멜 케이스(camelCase)
  var firstName;

  // 스네이크 케이스(snake_case)
  var first_name;

  // 파스칼 케이스(PascalCase)
  var FirstName;

  // 헝가리언 케이스(typeHungraianCase)
  var strFirstName; // type + identifier
  var $elem = document.getElementById('myId); // DOM 노드
  var observable$ = fromEvent(document, 'click'); // RxJS 옵저버블
```
일반적으로 <span style="color: lightblue">변수나 함수의 이름에는 카멜 케이스</span>를, 
<span style="color: lightblue">생성자 함수, 클래스의 이름에는 파스칼 케이스</span>를 사용한다

